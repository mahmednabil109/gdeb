// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package drpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DServerClient is the client API for DServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DServerClient interface {
	UpdatePointers(ctx context.Context, in *Pointers, opts ...grpc.CallOption) (*Empty, error)
}

type dServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDServerClient(cc grpc.ClientConnInterface) DServerClient {
	return &dServerClient{cc}
}

func (c *dServerClient) UpdatePointers(ctx context.Context, in *Pointers, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/drpc.DServer/UpdatePointers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DServerServer is the server API for DServer service.
// All implementations must embed UnimplementedDServerServer
// for forward compatibility
type DServerServer interface {
	UpdatePointers(context.Context, *Pointers) (*Empty, error)
	mustEmbedUnimplementedDServerServer()
}

// UnimplementedDServerServer must be embedded to have forward compatible implementations.
type UnimplementedDServerServer struct {
}

func (UnimplementedDServerServer) UpdatePointers(context.Context, *Pointers) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePointers not implemented")
}
func (UnimplementedDServerServer) mustEmbedUnimplementedDServerServer() {}

// UnsafeDServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DServerServer will
// result in compilation errors.
type UnsafeDServerServer interface {
	mustEmbedUnimplementedDServerServer()
}

func RegisterDServerServer(s grpc.ServiceRegistrar, srv DServerServer) {
	s.RegisterService(&DServer_ServiceDesc, srv)
}

func _DServer_UpdatePointers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pointers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DServerServer).UpdatePointers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drpc.DServer/UpdatePointers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DServerServer).UpdatePointers(ctx, req.(*Pointers))
	}
	return interceptor(ctx, in, info, handler)
}

// DServer_ServiceDesc is the grpc.ServiceDesc for DServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drpc.DServer",
	HandlerType: (*DServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePointers",
			Handler:    _DServer_UpdatePointers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drpc/drpc.proto",
}
